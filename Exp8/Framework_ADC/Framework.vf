////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Framework.vf
// /___/   /\     Timestamp : 11/30/2016 15:56:06
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family kintex7 -verilog C:/Users/CST/Desktop/Framework_ADC/Framework.vf -w C:/Users/CST/Desktop/Framework_ADC/Framework.sch
//Design Name: Framework
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module ADC32_MUSER_Framework(a, 
                             b, 
                             C0, 
                             Co, 
                             s);

    input [31:0] a;
    input [31:0] b;
    input C0;
   output Co;
   output [31:0] s;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_23;
   wire XLXN_50;
   wire XLXN_51;
   wire XLXN_52;
   wire XLXN_53;
   wire XLXN_54;
   wire XLXN_55;
   wire XLXN_56;
   wire XLXN_57;
   wire XLXN_58;
   wire XLXN_59;
   wire XLXN_60;
   wire XLXN_61;
   wire XLXN_62;
   wire XLXN_63;
   wire XLXN_64;
   wire XLXN_65;
   wire XLXN_67;
   wire XLXN_68;
   wire XLXN_73;
   wire XLXN_74;
   wire XLXN_81;
   wire XLXN_82;
   wire XLXN_83;
   wire XLXN_85;
   wire XLXN_86;
   wire XLXN_87;
   
   ADD4b  XLXI_1 (.a(a[31:28]), 
                 .b(b[31:28]), 
                 .C0(XLXN_1), 
                 .GG(XLXN_50), 
                 .GP(XLXN_51), 
                 .s(s[31:28]));
   ADD4b  XLXI_2 (.a(a[27:24]), 
                 .b(b[27:24]), 
                 .C0(XLXN_2), 
                 .GG(XLXN_52), 
                 .GP(XLXN_53), 
                 .s(s[27:24]));
   ADD4b  XLXI_3 (.a(a[23:20]), 
                 .b(b[23:20]), 
                 .C0(XLXN_23), 
                 .GG(XLXN_54), 
                 .GP(XLXN_55), 
                 .s(s[23:20]));
   ADD4b  XLXI_4 (.a(a[19:16]), 
                 .b(b[19:16]), 
                 .C0(XLXN_67), 
                 .GG(XLXN_56), 
                 .GP(XLXN_57), 
                 .s(s[19:16]));
   ADD4b  XLXI_5 (.a(a[15:12]), 
                 .b(b[15:12]), 
                 .C0(XLXN_87), 
                 .GG(XLXN_64), 
                 .GP(XLXN_65), 
                 .s(s[15:12]));
   ADD4b  XLXI_6 (.a(a[11:8]), 
                 .b(b[11:8]), 
                 .C0(XLXN_86), 
                 .GG(XLXN_62), 
                 .GP(XLXN_63), 
                 .s(s[11:8]));
   ADD4b  XLXI_7 (.a(a[7:4]), 
                 .b(b[7:4]), 
                 .C0(XLXN_85), 
                 .GG(XLXN_60), 
                 .GP(XLXN_61), 
                 .s(s[7:4]));
   ADD4b  XLXI_8 (.a(a[3:0]), 
                 .b(b[3:0]), 
                 .C0(C0), 
                 .GG(XLXN_58), 
                 .GP(XLXN_59), 
                 .s(s[3:0]));
   CLA  XLXI_9 (.Ci(XLXN_67), 
               .G0(XLXN_56), 
               .G1(XLXN_54), 
               .G2(XLXN_52), 
               .G3(XLXN_50), 
               .P0(XLXN_57), 
               .P1(XLXN_55), 
               .P2(XLXN_53), 
               .P3(XLXN_51), 
               .C1(XLXN_23), 
               .C2(XLXN_2), 
               .C3(XLXN_1), 
               .GG(XLXN_74), 
               .GP(XLXN_68));
   CLA  XLXI_12 (.Ci(C0), 
                .G0(XLXN_58), 
                .G1(XLXN_60), 
                .G2(XLXN_62), 
                .G3(XLXN_64), 
                .P0(XLXN_59), 
                .P1(XLXN_61), 
                .P2(XLXN_63), 
                .P3(XLXN_65), 
                .C1(XLXN_85), 
                .C2(XLXN_86), 
                .C3(XLXN_87), 
                .GG(XLXN_82), 
                .GP(XLXN_81));
   OR2  XLXI_14 (.I0(XLXN_73), 
                .I1(XLXN_74), 
                .O(Co));
   OR2  XLXI_15 (.I0(XLXN_83), 
                .I1(XLXN_82), 
                .O(XLXN_67));
   AND2  XLXI_16 (.I0(XLXN_67), 
                 .I1(XLXN_68), 
                 .O(XLXN_73));
   AND2  XLXI_17 (.I0(C0), 
                 .I1(XLXN_81), 
                 .O(XLXN_83));
endmodule
`timescale 1ns / 1ps

module Display_MUSER_Framework(clk, 
                               flash, 
                               Hexs, 
                               LES, 
                               point, 
                               rst, 
                               Start, 
                               seg_clk, 
                               seg_clm, 
                               SEG_PEN, 
                               seg_sout);

    input clk;
    input flash;
    input [31:0] Hexs;
    input [7:0] LES;
    input [7:0] point;
    input rst;
    input Start;
   output seg_clk;
   output seg_clm;
   output SEG_PEN;
   output seg_sout;
   
   wire [63:0] XLXN_5;
   
   P2S  XLXI_1 (.clk(clk), 
               .P_Data(XLXN_5[63:0]), 
               .rst(rst), 
               .Serial(Start), 
               .EN(SEG_PEN), 
               .sout(seg_sout), 
               .s_clk(seg_clk), 
               .s_clrn(seg_clm));
   HexTo8Seg  XLXI_2 (.flash(flash), 
                     .Hexs(Hexs[31:0]), 
                     .LES(LES[7:0]), 
                     .points(point[7:0]), 
                     .SEG_TXT(XLXN_5[63:0]));
endmodule
`timescale 1ns / 1ps

module MC14495_MUSER_Framework(D0, 
                               D1, 
                               D2, 
                               D3, 
                               LE, 
                               Point, 
                               a, 
                               b, 
                               c, 
                               d, 
                               e, 
                               f, 
                               g, 
                               p);

    input D0;
    input D1;
    input D2;
    input D3;
    input LE;
    input Point;
   output a;
   output b;
   output c;
   output d;
   output e;
   output f;
   output g;
   output p;
   
   wire AA;
   wire A0;
   wire A1;
   wire A2;
   wire A3;
   wire A4;
   wire A5;
   wire A6;
   wire A7;
   wire A8;
   wire A9;
   wire A10;
   wire A11;
   wire A12;
   wire A13;
   wire A14;
   wire A15;
   wire A16;
   wire A17;
   wire A18;
   wire A19;
   wire A20;
   wire BB;
   wire CC;
   wire DD;
   wire EE;
   wire FF;
   wire GG;
   wire ND0;
   wire ND1;
   wire ND2;
   wire ND3;
   
   AND4  AD0 (.I0(ND0), 
             .I1(ND1), 
             .I2(D2), 
             .I3(D3), 
             .O(A0));
   AND4  AD1 (.I0(D0), 
             .I1(D1), 
             .I2(D2), 
             .I3(ND3), 
             .O(A1));
   AND3  AD2 (.I0(ND1), 
             .I1(ND2), 
             .I2(ND3), 
             .O(A2));
   AND3  AD3 (.I0(D0), 
             .I1(D1), 
             .I2(ND3), 
             .O(A3));
   AND3  AD04 (.I0(D1), 
              .I1(ND2), 
              .I2(ND3), 
              .O(A4));
   AND3  AD05 (.I0(D0), 
              .I1(ND2), 
              .I2(ND3), 
              .O(A5));
   AND3  AD06 (.I0(D0), 
              .I1(ND1), 
              .I2(ND2), 
              .O(A6));
   AND3  AD07 (.I0(ND1), 
              .I1(D2), 
              .I2(ND3), 
              .O(A7));
   AND2  AD08 (.I0(D0), 
              .I1(ND3), 
              .O(A8));
   AND4  AD09 (.I0(ND0), 
              .I1(D1), 
              .I2(D3), 
              .I3(ND2), 
              .O(A9));
   AND3  AD10 (.I0(D0), 
              .I1(D1), 
              .I2(D2), 
              .O(A10));
   AND3  AD11 (.I0(D1), 
              .I1(D2), 
              .I2(D3), 
              .O(A11));
   AND4  AD12 (.I0(ND0), 
              .I1(D1), 
              .I2(ND2), 
              .I3(ND3), 
              .O(A12));
   AND3  AD13 (.I0(D0), 
              .I1(D1), 
              .I2(D3), 
              .O(A13));
   AND3  AD14 (.I0(ND0), 
              .I1(D2), 
              .I2(D3), 
              .O(A14));
   AND3  AD15 (.I0(ND0), 
              .I1(D1), 
              .I2(D2), 
              .O(A15));
   AND4  AD16 (.I0(D0), 
              .I1(ND1), 
              .I2(D2), 
              .I3(ND3), 
              .O(A16));
   AND4  AD17 (.I0(D0), 
              .I1(D1), 
              .I2(ND2), 
              .I3(D3), 
              .O(A17));
   AND4  AD18 (.I0(D0), 
              .I1(ND1), 
              .I2(D2), 
              .I3(D3), 
              .O(A18));
   AND4  AD19 (.I0(ND0), 
              .I1(ND1), 
              .I2(D2), 
              .I3(ND3), 
              .O(A19));
   AND4  AD20 (.I0(ND1), 
              .I1(ND2), 
              .I2(D0), 
              .I3(ND3), 
              .O(A20));
   OR4  a_1 (.I0(A17), 
            .I1(A18), 
            .I2(A19), 
            .I3(A20), 
            .O(AA));
   OR4  b_1 (.I0(A13), 
            .I1(A14), 
            .I2(A15), 
            .I3(A16), 
            .O(BB));
   OR3  c_1 (.I0(A11), 
            .I1(A12), 
            .I2(A14), 
            .O(CC));
   OR4  d_1 (.I0(A9), 
            .I1(A10), 
            .I2(A19), 
            .I3(A20), 
            .O(DD));
   OR3  e_1 (.I0(A6), 
            .I1(A7), 
            .I2(A8), 
            .O(EE));
   OR4  f_1 (.I0(A3), 
            .I1(A4), 
            .I2(A5), 
            .I3(A18), 
            .O(FF));
   OR3  g_1 (.I0(A0), 
            .I1(A1), 
            .I2(A2), 
            .O(GG));
   INV  INV_1 (.I(D3), 
              .O(ND3));
   INV  INV_2 (.I(D2), 
              .O(ND2));
   INV  INV_3 (.I(D1), 
              .O(ND1));
   INV  INV_4 (.I(D0), 
              .O(ND0));
   OR2  XLXI_68 (.I0(LE), 
                .I1(AA), 
                .O(a));
   OR2  XLXI_69 (.I0(LE), 
                .I1(BB), 
                .O(b));
   OR2  XLXI_70 (.I0(LE), 
                .I1(CC), 
                .O(c));
   OR2  XLXI_71 (.I0(LE), 
                .I1(DD), 
                .O(d));
   OR2  XLXI_72 (.I0(LE), 
                .I1(EE), 
                .O(e));
   OR2  XLXI_73 (.I0(LE), 
                .I1(FF), 
                .O(f));
   OR2  XLXI_74 (.I0(LE), 
                .I1(GG), 
                .O(g));
   INV  XLXI_89 (.I(Point), 
                .O(p));
endmodule
`timescale 1ns / 1ps

module Seg7_Dev_MUSER_Framework(flash_clk, 
                                Hexs, 
                                LES, 
                                point, 
                                Scan, 
                                AN, 
                                SEGMENT);

    input flash_clk;
    input [31:0] Hexs;
    input [7:0] LES;
    input [7:0] point;
    input [2:0] Scan;
   output [3:0] AN;
   output [7:0] SEGMENT;
   
   wire G0;
   wire [3:0] Hex;
   wire V5;
   wire XLXN_6;
   wire XLXN_8;
   wire XLXN_11;
   
   MC14495_MUSER_Framework  XLXI_2 (.D0(Hex[0]), 
                                   .D1(Hex[1]), 
                                   .D2(Hex[2]), 
                                   .D3(Hex[3]), 
                                   .LE(XLXN_11), 
                                   .Point(XLXN_6), 
                                   .a(SEGMENT[0]), 
                                   .b(SEGMENT[1]), 
                                   .c(SEGMENT[2]), 
                                   .d(SEGMENT[3]), 
                                   .e(SEGMENT[4]), 
                                   .f(SEGMENT[5]), 
                                   .g(SEGMENT[6]), 
                                   .p(SEGMENT[7]));
   AND2  XLXI_3 (.I0(XLXN_8), 
                .I1(flash_clk), 
                .O(XLXN_11));
   Scansync  XLXI_4 (.Hexs(Hexs[31:0]), 
                    .LES(LES[7:0]), 
                    .point(point[7:0]), 
                    .Scan(Scan[2:0]), 
                    .AN(AN[3:0]), 
                    .Hex(Hex[3:0]), 
                    .LE(XLXN_8), 
                    .p(XLXN_6));
   VCC  XLXI_5 (.P(V5));
   GND  XLXI_6 (.G(G0));
endmodule
`timescale 1ns / 1ps

module Framework(clk_100mhz, 
                 K_COL, 
                 RSTN, 
                 SW, 
                 AN, 
                 Buzzer, 
                 CR, 
                 K_ROW, 
                 LED, 
                 LEDCLK, 
                 LEDCLR, 
                 LEDDT, 
                 LEDEN, 
                 RDY, 
                 readn, 
                 SEGCLK, 
                 SEGCLR, 
                 SEGDT, 
                 SEGEN, 
                 SEGMENT);

    input clk_100mhz;
    input [3:0] K_COL;
    input RSTN;
    input [15:0] SW;
   output [3:0] AN;
   output Buzzer;
   output CR;
   output [4:0] K_ROW;
   output [7:0] LED;
   output LEDCLK;
   output LEDCLR;
   output LEDDT;
   output LEDEN;
   output RDY;
   output readn;
   output SEGCLK;
   output SEGCLR;
   output SEGDT;
   output SEGEN;
   output [7:0] SEGMENT;
   
   wire [31:0] Ai;
   wire [31:0] Bi;
   wire [7:0] blink;
   wire [3:0] BTN_OK;
   wire Co;
   wire [31:0] Disp_num;
   wire [31:0] Div;
   wire G0;
   wire [7:0] LE_out;
   wire [7:0] point_out;
   wire [3:0] Pulse;
   wire rst;
   wire [15:0] SW_OK;
   wire V5;
   wire [4:0] XLXN_23;
   wire [31:0] XLXN_122;
   wire RDY_DUMMY;
   wire readn_DUMMY;
   
   assign RDY = RDY_DUMMY;
   assign readn = readn_DUMMY;
   SAnti_jitter  XLXI_1 (.clk(clk_100mhz), 
                        .Key_y(K_COL[3:0]), 
                        .readn(readn_DUMMY), 
                        .RSTN(RSTN), 
                        .SW(SW[15:0]), 
                        .BTN_OK(BTN_OK[3:0]), 
                        .CR(CR), 
                        .Key_out(XLXN_23[4:0]), 
                        .Key_ready(RDY_DUMMY), 
                        .Key_x(K_ROW[4:0]), 
                        .pulse_out(Pulse[3:0]), 
                        .rst(rst), 
                        .SW_OK(SW_OK[15:0]));
   SEnter_2_32  XLXI_3 (.BTN(BTN_OK[2:0]), 
                       .clk(clk_100mhz), 
                       .Ctrl({SW_OK[7:5], SW_OK[15], SW_OK[0]}), 
                       .Din(XLXN_23[4:0]), 
                       .D_ready(RDY_DUMMY), 
                       .Ai(Ai[31:0]), 
                       .Bi(Bi[31:0]), 
                       .blink(blink[7:0]), 
                       .readn(readn_DUMMY));
   clkdiv  XLXI_4 (.clk(clk_100mhz), 
                  .rst(rst), 
                  .clkdiv(Div[31:0]));
   Display_MUSER_Framework  XLXI_5 (.clk(clk_100mhz), 
                                   .flash(Div[25]), 
                                   .Hexs(Disp_num[31:0]), 
                                   .LES(LE_out[7:0]), 
                                   .point(point_out[7:0]), 
                                   .rst(rst), 
                                   .Start(Div[20]), 
                                   .seg_clk(SEGCLK), 
                                   .seg_clm(SEGCLR), 
                                   .SEG_PEN(SEGEN), 
                                   .seg_sout(SEGDT));
   GPIO  XLXI_8 (.clk(clk_100mhz), 
                .EN(V5), 
                .P_Data({Div[25:0], Co, G0, G0, G0, G0, SW_OK[1]}), 
                .rst(rst), 
                .Start(Div[20]), 
                .GPIOf0(), 
                .led_clk(LEDCLK), 
                .led_clrn(LEDCLR), 
                .LED_PEN(LEDEN), 
                .led_sout(LEDDT));
   ADC32_MUSER_Framework  XLXI_15 (.a(Ai[31:0]), 
                                  .b(Bi[31:0]), 
                                  .C0(), 
                                  .Co(Co), 
                                  .s(XLXN_122[31:0]));
   Seg7_Dev_MUSER_Framework  XLXI_16 (.flash_clk(Div[25]), 
                                     .Hexs(Disp_num[31:0]), 
                                     .LES(LE_out[7:0]), 
                                     .point(point_out[7:0]), 
                                     .Scan({SW_OK[1], Div[19:18]}), 
                                     .AN(AN[3:0]), 
                                     .SEGMENT(SEGMENT[7:0]));
   PIO  XLXI_17 (.clk(clk_100mhz), 
                .EN(V5), 
                .PData_in({Div[25:0], Co, G0, G0, G0, G0, SW_OK[1]}), 
                .rst(G0), 
                .GPIOf0(), 
                .LED(LED[7:0]));
   VCC  XLXI_27 (.P(Buzzer));
   VCC  XLXI_28 (.P(V5));
   GND  XLXI_29 (.G(G0));
   Multi_8CH32  XLXI_30 (.clk(clk_100mhz), 
                        .Data0(Ai[31:0]), 
                        .EN(V5), 
                        .LES({G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, 
         G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, 
         G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, G0, 
         G0, G0, blink[7:0], blink[7:0]}), 
                        .point_in({Div[31:0], Div[31:0]}), 
                        .rst(rst), 
                        .Test(SW_OK[7:5]), 
                        .Test_data1(Bi[31:0]), 
                        .Test_data2(XLXN_122[31:0]), 
                        .Test_data3(XLXN_122[31:0]), 
                        .Test_data4(XLXN_122[31:0]), 
                        .Test_data5(XLXN_122[31:0]), 
                        .Test_data6(XLXN_122[31:0]), 
                        .Test_data7(XLXN_122[31:0]), 
                        .blink_out(LE_out[7:0]), 
                        .Disp_num(Disp_num[31:0]), 
                        .point_out(point_out[7:0]));
endmodule
